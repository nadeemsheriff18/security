from groq import Groq
import json
import pandas as pd
import os
from dotenv import load_dotenv
from classifier import classify_response

load_dotenv()
api_key = os.getenv("GROQ_API_KEY")
client = Groq(api_key=api_key)

def test_prompt(prompt):
    try:
        response = client.chat.completions.create(
            model="llama3-70b-8192"  # Or "llama3-8b-8192" if you want lighter
,  # You can also try llama3-70b-8192
            messages=[
                {"role": "user", "content": prompt}
            ],
            temperature=0
        )
        return response.choices[0].message.content.strip()

    except Exception as e:
        return f"[ERROR] {e}"

def main():
    with open("prompts.json") as f:
        prompts = json.load(f)

    results = []

    for item in prompts:
        prompt = item["prompt"]
        category = item["category"]
        print(f"⚙️ Testing: {prompt[:60]}...")

        response = test_prompt(prompt)
        verdict = classify_response(response)

        results.append({
            "prompt": prompt,
            "category": category,
            "response": response,
            "verdict": verdict
        })

    df = pd.DataFrame(results)
    df.to_csv("output.csv", index=False)
    print("✅ Results saved to output.csv")

if __name__ == "__main__":
    main()
